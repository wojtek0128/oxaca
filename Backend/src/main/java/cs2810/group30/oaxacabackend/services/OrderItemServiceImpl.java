package cs2810.group30.oaxacabackend.services;

import cs2810.group30.oaxacabackend.models.OrderItem;
import cs2810.group30.oaxacabackend.repository.MenuRepository;
import cs2810.group30.oaxacabackend.repository.OrderItemRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**Implementation of OrderItemRepo and OrderItemService providing methods to the controller.
 *
 * @author Mostafa
 */
@Service
public class OrderItemServiceImpl implements OrderItemService{

    @Autowired
    private OrderItemRepo orderItemRepository;
    @Autowired
    private MenuServiceImpl menuService;

    /**Returns all OrderItems in the database sorted by the Order they're associated with.
     * @return A list of all OrderItems in the db sorted by the Order they're associated with.
     */
    @Override
    public List<OrderItem> getAll(){
        return orderItemRepository.findAll(Sort.by(Sort.Direction.ASC, "orderId"));
    }

    /**Adds the OrderItem provided into the db, an OrderItemId or Name does not need to be provided as the ID is autogenerated and the Name is found by querying the menu.
     * @param item The Item to be added, it's ID will be autogenerated and it's Name queried from it's MenuID.
     * @return The Item added to the db.
     */
    @Override
    public OrderItem saveItem(OrderItem item) {
        item.setItemId(UUID.randomUUID().toString());
        item.setName(menuService.getNameById(item.getMenuId()));
        return orderItemRepository.save(item);
    }

    /**Deletes the Order Item associated with the ID given.
     *
     * @param id the ID of the orderItem to be deleted.
     * @return True if the order is deleted, false if the ID was invalid.
     */
    @Override
    public boolean deleteOrderItem(String id) {
        Optional<OrderItem> temp = orderItemRepository.findByitemId(id);
        if (temp.isPresent()) {
            OrderItem item = temp.get();
            orderItemRepository.delete(item);
            return true;
        }
        return false;
    }

    /**Deletes all OrderItems associated with the specific order.
     *
     * @param orderId The ID of the Order that the OrderItem(s) link too, and deletes them all.
     */
    @Override
    public void deleteAllByOrder(String orderId){
        orderItemRepository.deleteAllByorderId(orderId);
    }

    /**Deletes all OrderItems in the db.
     *
     */
    @Override
    public void deleteAll(){
        orderItemRepository.deleteAll();
    }

    /**Returns a list of all OrderItems associated with the OrderId given.
     * @param id The OrderId that you want to return all the OrderItems of.
     * @return A list of all the OrderItems associated with that Id.
     */
    @Override
    public List<OrderItem> getAllByOrderId(String id) {
        return orderItemRepository.findAllByOrderId(id);
    }
}
